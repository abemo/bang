Bang {
  space := "\n" | " " | "\t" | "\r" | multiLineComment | comment
  Program               = Statement*
  Closure               = "{" Statement* "}"                                -- multiLine
                        | Statement
  // TODO statements can be stuck together on one line ex. `float = 5 str = "test"`
  Statement             = const? Exp assignmentOp Exp                       -- varAssignment
                        | print "(" Exp ")"                                 -- print
                        | return Exp                                        -- return
                        | break
                        | Exp
  Exp                   = Exp (("=" | "!") "=" | ("<" | ">") "="?) Exp1     -- equality
                        | "(" Exp1 ")"                                      -- enclosed
                        | Ternary
                        | Exp1
  Exp1                  = Exp1 "||" Exp2                                    -- or
                        | Exp2
  Exp2                  = Exp2 "&&" Exp3                                    -- and
                        | Exp3
  Exp3                  = "!" Exp4                                          -- not
                        | Exp4
  Exp4                  = Exp4 ("+" | "-") Exp5                             -- addSubtract
                        | Exp5
  Exp5                  = Exp5 ("*" | "/" | "%") Exp6                       -- multiplyDivideMod
                        | Exp6
  Exp6                  = Exp7 "**" Exp6                                    -- exponent
                        | "-"? Exp7                                         -- negative
  Exp7                  = id
                        | Exp8 "[" Exp "]"                                  -- subscript
                        | Exp8? "." id                                      -- select
                        | Exp8
  Exp8                  = nil       | Str       | Num       | Obj       
                        | boolLit   | Closure   | Enum      | MatchExp

  // ternaries
  Ternary               = Exp "?" Closure (":" Closure)?
  
  // function stuff
  FuncLit               = "(" Params ")" arrow Closure
  Params                = (Arg ("," Arg)*)?
  Arg                   = PositionalArg | KeywordArg
  PositionalArg         = Exp
  KeywordArg            = id "=" Exp
  arrow                 = "->"
  print                 = "print" // TODO: test for `x = 5`//`printx(x)`

  // objects
  Obj                   = "{" ObjField* "}"
  ObjField              = key ":" Exp
  key                   = ~keyword strLit

  // lists

  // strings
  Str                   = (Str | id) ("+" (Str | id))+                      -- concatenation
                        | strLit | formattedStr
  strLit                = "'" singleStrChar* "'"
                        | "\"" doubleStrChar* "\""
  formattedStr          = "$'" formattedSubstr* "'"                         -- singleQuotes
                        | "$\"" formattedSubstr* "\""                       -- doubleQuotes
  formattedSubstr       = (strChar*)? "{" id "}"
  
  // special chars
  strChar               = singleStrChar | doubleStrChar
  singleStrChar         = ~("'" | "\\" | lineTerminator) any                -- nonEscaped
                        | "\\" escapeChar                                   -- escaped
                        | lineContinuation
  doubleStrChar         = ~("\"" | "\\" | lineTerminator) any               -- nonEscaped
                        | "\\" escapeChar                                   -- escaped
                        | lineContinuation
  escapeChar            = "'" | "\"" | "\\" | "n" | "t" | "r" | "u"
  char                  = ~(escapeChar | lineTerminator) any
  lineTerminator        = "\n" | "\r" ~"\n" | "\u2028" | "\u2029"
  lineContinuation      = "\\" lineTerminator

  // variables
  const                 = "const" ~idchar
  id                    = ~keyword (letter | "_") idchar*
  idchar                = alnum | "_"

  // booleans
  boolLit               = true | false
  true                  = "true" ~idchar
  false                 = "false" ~idchar

  // todo hex? "0x" hexNum
  // numbers
  Num                   = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  // TODO bitwise ops?
  // operators
  assignmentOp          = "=" | "+=" | "-=" | "*=" | "/=" | "%="

  // switch statements
  MatchExp              = match id "{" MatchCase+ DefaultCase "}"
  MatchCase             = case Exp ("," Exp)* ":" Closure
  DefaultCase           = default ":" Closure
  match                 = "match" ~idchar
  case                  = "case" ~idchar
  default               = "default"

  // enums
  Enum                  = enum id "{" EnumBlock "}"
  EnumBlock             = EnumCaseAssignment+ | enumCases
  EnumCaseAssignment    = id "=" Exp
  enumCases             = id (("," | lineTerminator) spaces id)*
  enum                  = "enum" ~idchar

  return                = "return" ~idchar

  // todo what about while loops?

  // todo vars inside smaller scopes should be global by default

  multiLineComment      = "/*" (~"*/" any)* "*/"
  comment               = "//" (~lineTerminator any)*

  // other
  keyword               = const     | print     | boolLit     | match    
                        | nil       | enum
  nil                   = "nil" ~idchar
  break                 = "break" ~idchar
}