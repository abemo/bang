import * as chai from 'chai'
import { parse } from '../src/parser'
import { tokenize } from '../src/lexer'
import { run } from '../src/interpreter'

const programs = [
  ['number addition', 'prt(5 + 3)', '8'],
  ['number subtraction', 'prt(3 - 5)', '-2'],
  ['number + true', 'prt(5 + T)', '6'],
  ['number - true', 'prt(5 - T)', '4'],
  ['true + number', 'prt(T + 6)', '7'],
  ['true - number', 'prt(T - 6)', '-5'],
  ['number + false', 'prt(5 + F)', '5'],
  ['number - false', 'prt(5 - F)', '5'],
  ['false + number', 'prt(F + 5)', '5'],
  ['false - number', 'prt(F - 5)', '-5'],
  ['number + nil', 'prt(5 + nil)', '5'],
  ['number - nil', 'prt(5 - nil)', '5'],
  ['nil + number', 'prt(nil + 5)', '5'],
  ['nil - number', 'prt(nil - 5)', '-5'],
  ['true + true', 'prt(T + T)', 'T'],
  ['true + false', 'prt(T + F)', 'T'],
  ['false + true', 'prt(F + T)', 'T'],
  ['false + false', 'prt(F + F)', 'F'],
  ['true + nil', 'prt(T + nil)', 'T'],
  ['nil + true', 'prt(nil + T)', 'T'],
  ['false + nil', 'prt(F + nil)', 'F'],
  ['nil + false', 'prt(nil + F)', 'F'],
  ['true - true', 'prt(T - T)', 'F'],
  ['true - false', 'prt(T - F)', 'T'],
  ['false - true', 'prt(F - T)', 'T'],
  ['false - false', 'prt(F - F)', 'F'],
  ['true - nil', 'prt(T - nil)', 'T'],
  ['nil - true', 'prt(nil - T)', 'F'],
  ['false - nil', 'prt(F - nil)', 'F'],
  ['nil - false', 'prt(nil - F)', 'F'],
  ['print string', `prt('hi')`, 'hi'],
  ['print multiple strings', `prt('hello', 'world')`, 'hello world'],
  ['string + string', `prt('hello ' + 'world')`, 'hello world'],
  ['string + string + string', `prt('hello' + ' ' + 'world')`, 'hello world'],
  ['string - string', `prt('hello world' + 'my world' - 'world')`, 'hello my world'],
  ['string + number', `prt('hello' + 4)`, '9'],
  ['string - number', `prt('hello' - 4)`, '1'],
  ['string + T', `prt('true is ' + T)`, 'true is T'],
  ['string + F', `prt('false is ' + F)`, 'false is F'],
  ['string - T', `prt('TT' - T)`, 'T'],
  ['string - F', `prt('FF' - F)`, 'F'],
  ['string + nil', `prt('hello' + nil)`, ' hello '],
  ['string - nil', `prt('  hello \n' - nil)`, ' hello '],
  ['number + string', `prt(4 + 'hello')`, '9'],
  ['number - string', `prt(4 - 'hello')`, '-1'],
  ['number + number + string', `prt(1 + 2 + 'hello')`, '8'],
  ['number - number + string', `prt(1 - 2 + 'hello')`, '4'],
  ['number + boolean + string', `prt(5 + T + 'hello')`, '11'],
  ['number - boolean + string', `prt(5 - T + 'hello')`, '9'],
  ['number + nil + string', `prt(5 + nil + 'hello')`, '10'],
  ['T + string', `prt(T + ' is true')`, 'T is true'],
  ['F + string', `prt(F + ' is false')`, 'F is false'],
  ['T - random string', `prt(T - 'TT')`, 'T'],
  ['F - random string', `prt(F - 'FF')`, 'F'],
  ['T - T string', `prt(T - 'T')`, ''],
  ['F - F string', `prt(F - 'F')`, ''],
  ['nil + string', `prt(nil + 'hello')`, ' hello '],
  ['printing nil', 'prt(nil)', 'nil'],
  ['nil - string', `prt(nil - 'hello')`, 'nil'],
  ['printing list', 'prt([1, 2])', '[1, 2]'],
  ['printing list with strings', `prt([1, 'hello', 2])`, `[1, 'hello', 2]`],
  ['list + list', `prt([1] + ['hello', 2])`, `[1, 'hello', 2]`],
  ['list + nested list', `prt([1] + ['hello', [2]])`, `[1, 'hello', [2]]`],
  ['printing object', `prt({'key': 1, 'key2': 'hello'})`, `{\n  'key': 1,\n  'key2': 'hello'\n}`],
  ['list + object', `prt([1] + {'key': 1, 'key2': 'hello'})`, `[1, {\n  'key': 1,\n  'key2': 'hello'\n}]`],
  ['list + string', `prt([1] + 'hello')`, `[1, 'hello']`],
  ['list + number', `prt([1] + 5)`, `[1, 5]`],
  ['list + boolean', `prt([1] + T)`, `[1, T]`],
  ['list + nil', `prt(['hello', [3, [2]]] + nil)`, `['hello', 3, [2]]`],
  ['nil equality', 'prt(nil == nil)', 'T'],
  ['nil inequality', 'prt(nil != nil)', 'F'],
  ['T equality', 'prt(T == T)', 'T'],
  ['T inequality', 'prt(T != T)', 'F'],
  ['F equality', 'prt(F == F)', 'T'],
  ['F equality', 'prt(F == F)', 'T'],
  ['T/F equality', 'prt(T == F)', 'F'],
  ['T/F inequality', 'prt(T != F)', 'T'],
  ['number equality', 'prt(5 == 5)', 'T'],
  ['number equality false', 'prt(5 == -5)', 'F'],
  ['number inequality', 'prt(5 != -5)', 'T'],
  ['number inequality false', 'prt(5 != 5)', 'F'],
  ['string equality', `prt('hello' == 'hello')`, 'T'],
  ['string equality false', `prt('hello' == 'helo')`, 'F'],
  ['string inequality', `prt('hello' != 'helo')`, 'T'],
  ['string inequality false', `prt('hello' != 'hello')`, 'F'],
  ['object equality', `prt({'key': 1, 'key2': 'hello'} == {'key': 1, 'key2': 'hello'})`, 'T'],
  ['object equality false by order', `prt({'key': 1, 'key2': 'hello'} == {'key2': 'hello', 'key': 1})`, 'F'],
  ['object inequality by key', `prt({'key': 1, 'key2': 'hello'} != {'key1': 1, 'key2': 'hello'})`, 'T'],
  ['object inequality by value', `prt({'key': 1, 'key2': 'hello'} != {'key': '1', 'key2': 'hello'})`, 'T'],
  ['object inequality false', `prt({'key': 1, 'key2': 'hello'} != {'key': 1, 'key2': 'hello'})`, 'F'],
  ['list equality', `prt([[], {'key': 1, 'key2': 'hello'}] == [[], {'key': 1, 'key2': 'hello'}])`, 'T'],
  ['list equality false by order', `prt([[], {'key': 1, 'key2': 'hello'}] == [{'key': 1, 'key2': 'hello'}, []])`, 'F'],
  ['list inequality', `prt(['hi', {'key': 1, 'key2': 'hello'}] != ['hii', {'key': 1, 'key2': 'hello'}])`, 'T'],
  ['list inequality false', `prt([1, {'key': 1, 'key2': 'hello'}] != [1, {'key': 1, 'key2': 'hello'}])`, 'F'],
  [
    'list equality false by nested object',
    `prt([[], {'key': 1, 'key2': 'h'}] == [[], {'key': 1, 'key2': 'hello'}])`,
    'F',
  ],
  ['list - list', `prt([1, 'hello', 'world'] - [1, 'world', 4])`, `['hello']`],
  [
    'list - list with duplicate elements',
    `prt([1, 'world', 1, 'hello', 'world'] - ['world', 1, 'world', 4])`,
    `[1, 'hello']`,
  ],
  ['list - object successful', `prt([1, {'key': 1, 'key2': 'hello'}] - {'key': 1, 'key2': 'hello'})`, '[1]'],
  [
    'list - object unsuccessful',
    `prt([1, {'key': 1, 'key2': 'h'}] - {'key': 1, 'key2': 'hello'})`,
    `[1, {\n  'key': 1,\n  'key2': 'h'\n}]`,
  ],
  ['list - string successful', `prt(['hello', 1, 'hello'] - 'hello')`, `[1, 'hello']`],
  ['list - string unsuccessful', `prt(['hello', 1, 'hello'] - 'h')`, `['hello', 1, 'hello']`],
  ['list - number successful', `prt([1, 'hello', 1] - 1)`, `['hello', 1]`],
  ['list - number unsuccessful', `prt(['hello', 1, 'hello'] - 2)`, `['hello', 1, 'hello']`],
  ['list - boolean successful', `prt([F, 1, F] - F)`, `[1, F]`],
  ['list - boolean unsuccessful', `prt(['hello', F, 'hello'] - T)`, `['hello', F, 'hello']`],
  ['list - nil removes empty list', `prt(['hi', [], F, 0, '', {}] - nil)`, `['hi', F, 0, '', { }]`],
  ['list - nil removes empty object', `prt(['hi', {}, F, 0, '', []] - nil)`, `['hi', F, 0, '', []]`],
  ['list - nil removes empty string', `prt(['hi', '', F, 0, [], {}] - nil)`, `['hi', F, 0, [], { }]`],
  ['list - nil removes number', `prt(['hi', 0, F, [], '', {}] - nil)`, `['hi', F, [], '', { }]`],
  ['list - nil removes boolean', `prt(['hi', F, [], 0, '', {}] - nil)`, `['hi', [], 0, '', { }]`],
  [
    'list - nil unsuccessful',
    `prt(['hi', [''], T, 1, ' ', {'key': 1}] - nil)`,
    `['hi', [''], T, 1, ' ', {\n  'key': 1\n}]`,
  ],
  ['list addition ordering', `prt(T + [1] + 'hello' + 5)`, `[T, 1, 'hello', 5]`],
  ['object + list', `prt({'key': 1, 'key2': 'hi'} + [5])`, `[{\n  'key': 1,\n  'key2': 'hi'\n}, 5]`],
  // TODO
  // all types (excluding objects for now) +/- list
]

for (const [scenario, program, expected] of programs) {
  const actual: string[] = []

  const log = console.log
  console.log = function (...args: any[]) {
    actual.push(args.join(' '))
  }

  run(parse(tokenize(program as string)))

  console.log = log

  chai.assert.equal(actual.join('\n'), expected)
  console.log(`${scenario} passes`)
}
