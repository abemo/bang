Bang {
  Program         = Statement+
  Statement       = const? id "=" Exp                               -- varAssignment
                  | print "(" Exp ")"                               -- print
                  | Exp
  Exp             = Function | Obj | Literal
  Block           = "{" Statement* "}"
  Var             = Var "[" Exp "]"                                 -- subscript
                  | Var "." id                                      -- select
                  | id
  // TODO: Literal = nil (?)
  
  // function stuff
  Function        = "(" Params ")" arrow Block                      -- arrowFunc
                  | Block
  Params          = (id ("," id)*)?
// TODO may need FunctionObj = Block
  arrow           = "->"
  print           = "print" ~idchar     // TODO: is this redundant

  // objects
  // need to disallow statements with ":" in Block
  // can contain functions, key assignment using ":"
  // can't contain statements
  Obj             = "{" ObjField* "}"
  ObjField        = key ":" ObjVal
  ObjVal          = Block | Var | Literal
  key             = ~keyword idchar*

  // lists

  // literals
  str             = formattedStr
                  | "'" singleStrChars "'"
                  | "\"" doubleStrChars "\""
  formattedStr    = "$'" formattedSubstr* "'"                       -- singleQuotes
                  | "$\"" formattedSubstr* "\""                     -- doubleQuotes
  formattedSubstr = strChars? "{" id "}"
  

  // special chars
  strChars        = singleStrChars | doubleStrChars
  singleStrChars  = ~("'" | "\\" | lineTerminator) any*             -- nonEscaped
                  | "\\" escapeChar                                 -- escaped
                  | lineContinuation
  doubleStrChars  = ~("\"" | "\\" | lineTerminator) any*            -- nonEscaped
                  | "\\" escapeChar                                 -- escaped
                  | lineContinuation
  escapeChar      = "'" | "\"" | "\\" | "n" | "t" | "r" | "u"
  char            = ~(escapeChar | lineTerminator) any
  lineTerminator  = "\n" | "\r" | "\u2028" | "\u2029"

  // variables
  const           = "const" ~idchar     // TODO: isn't the ~idchar redundant? wouldn't it not match regardless?
  id              = ~keyword (letter | "_") idchar*
  idchar          = letter | digit | "_"

  // booleans

  // numbers

  // operators

  // other
  keyword         = const | print | true | false | nil

  // TODO: bools (0 and 1 also work), nums, and, or, not, equals, comments, break, nil, lists, objects


}