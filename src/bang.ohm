Bang {
  space := "\n" | " " | "\t" | "\r" | multiLineComment | comment
  Program               = Block
  Block                 = #newLine* StatementNewLine* Statement? #newLine*  
  StatementNewLine      = Statement #(~newLine space)* #newLine+
  Statement             = local? const? VarAssignment assignmentOp Exp                      -- varAssignment
                        | local VarAssignment                                               -- localVar
                        | return Exp?                                                       -- return
                        | Exp
                        | Enum      
                        | break
  Exp                   = Exp1 "?" (BangFunc | Statement) (":" (BangFunc | Statement))?     -- ternary
                        | Exp1
  Exp1                  = Exp1 (("=" | "!") "=" | ("<" | ">") "="?) Exp2                    -- equality
                        | Exp2
  Exp2                  = Exp2 "||" Exp3                                                    -- or
                        | Exp3
  Exp3                  = Exp3 "&&" Exp4                                                    -- and
                        | Exp4
  Exp4                  = Exp4 ("+" | "-") Exp5                                             -- addSubtract
                        | Exp5
  Exp5                  = Exp5 ("*" | "/" | "%") Exp6                                       -- multiplyDivideMod
                        | Exp6
  Exp6                  = Exp7 "**" Exp6                                                    -- exponent
                        | "-" Exp7                                                          -- negate
                        | "..." Exp7                                                        -- spread
                        | Exp7
  Exp7                  = Exp7 Params                                                       -- call
                        | Exp7 "[" Exp "]"                                                  -- subscript
                        | Exp7? "." VarAssignment                                           -- select
                        | "!" Exp7                                                          -- negative
                        | Exp7 #"?"                                                         -- unwrap
                        | Exp8
  Exp8                  = nil       | Str       | num       | Obj       
                        | boolLit   | BangFunc  | MatchExp  | ListLit   
                        | FuncLit   | id
                        | "(" Exp ")"                                                       -- enclosed

  BangFunc              = "{" Block "}"
  VarAssignment         = VarAssignment "[" Exp "]"                                         -- subscript
                        | VarAssignment "." VarAssignment                                   -- select
                        | id
  
  FuncLit               = (Params | id) "->" (BangFunc | Statement)
  Params                = "(" ListOf<Arg, ","> ")"
  Arg                   = KeywordArg | PositionalArg
  PositionalArg         = Exp
  KeywordArg            = id "=" Exp

  Obj                   = "{" ListOf<ObjField, ","> "}"
  ObjField              = key ":" Exp
  key                   = strLit

  ListLit               = "[" ListOf<Exp, ","> "]"

  Str                   = strLit | FormattedStr
  strLit                = "'" singleStrChar* "'"
                        | "\"" doubleStrChar* "\""
  FormattedStr          = "$'" FSingleSubstr* "'"
                        | "$\"" FDoubleSubstr* "\""
  FSingleSubstr         = fSingleStrChar | FStrExp
  FDoubleSubstr         = fDoubleStrChar | FStrExp
  FStrExp               = "{" Exp "}"
  
  // special chars
  fSingleStrChar        = ~"{" singleStrChar
  fDoubleStrChar        = ~"{" doubleStrChar
  singleStrChar         = ~("'" | "\\" | newLine) any                                       -- nonEscaped
                        | "\\" escapeChar                                                   -- escaped
                        | lineContinuation
  doubleStrChar         = ~("\"" | "\\" | newLine) any                                      -- nonEscaped
                        | "\\" escapeChar                                                   -- escaped
                        | lineContinuation
  escapeChar            = "'" | "\"" | "\\" | "n" | "t" | "r" | "u"
  newLine               = "\n" | "\r" ~"\n" | "\u2028" | "\u2029"
  lineContinuation      = "\\" newLine

  const                 = "const" ~idchar
  id                    = ~keyword (letter | "_") idchar*
  idchar                = alnum | "_"

  boolLit               = true | false
  true                  = "true" ~idchar
  false                 = "false" ~idchar

  num                   = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  assignmentOp          = "=" | "+=" | "-=" | "*=" | "/=" | "%="

  MatchExp              = match id MatchBlock
  MatchBlock            = "{" CaseClause+ DefaultClause? "}"
  CaseClause            = case ListOf<Exp, ","> ":" (BangFunc | Statement)
  DefaultClause         = default ":" (BangFunc | Statement) 
  match                 = "match" ~idchar
  case                  = "case" ~idchar
  default               = "default"

  Enum                  = enum id "{" EnumBlock "}"
  EnumBlock             = NonemptyListOf<EnumCaseAssignment, ",">
  EnumCaseAssignment    = id "=" Exp                                                        -- withValue
                        | id
  enum                  = "enum" ~idchar

  return                = "return" ~idchar

  multiLineComment      = "/*" (~"*/" any)* "*/"
  comment               = "//" (~newLine any)*

  keyword               = const     | boolLit   | match     | nil       
                        | enum      | break     | return    | local     
  nil                   = "nil" ~idchar
  break                 = "break" ~idchar
  local                 = "local" ~idchar
}