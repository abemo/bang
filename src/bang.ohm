Bang {
  space += multiLineComment | comment
  Program               = Block
  Block                 = #newLine* StatementNewLine* Statement? #newLine*  
  StatementNewLine      = Statement #(~newLine space)* #newLine+
  Statement             = local? const? id assignmentOp Exp                                 -- varDec
                        | local id                                                          -- localVar
                        | VarAssignment assignmentOp Exp                                    -- varAssignment
                        | return Exp?                                                       -- return
                        | Exp                                                               -- impliedReturn
                        | break                                                             -- break
  Exp                   = Exp1 "?" (BangFunc | Statement) (":" (BangFunc | Statement))?     -- ternary
                        | Exp1
  Exp1                  = LeftCompare+ Exp2                                                 -- equality
                        | Exp2
  Exp2                  = Exp2 "||" Exp3                                                    -- or
                        | Exp3
  Exp3                  = Exp3 "&&" Exp4                                                    -- and
                        | Exp4
  Exp4                  = LeftAddition+ Exp5                                                -- addSubtract
                        | Exp5
  Exp5                  = LeftMultiply+ Exp6                                                -- multiplyDivideMod
                        | Exp6
  Exp6                  = LeftExponent+ Exp7                                                -- exponent
                        | Exp7
  Exp7                  = "-" Exp8                                                          -- negate
                        | "..." Exp8                                                        -- spread
                        | Exp8
  Exp8                  = Exp9 #("++" | "--")                                               -- postFix
                        | ("++" | "--") Exp9                                                -- preFix
                        | Exp9
  Exp9                  = Exp9 #(~newLine space)* ~#newLine Args                            -- call
                        | Exp9 #"[" Exp "]"                                                 -- subscript
                        | LeftSelect id                                                     -- select
                        | "!" Exp9                                                          -- negative
                        | Exp9 #"?"                                                         -- unwrap
                        | Exp10
  Exp10                 = nil       | Str       | num       | Obj       
                        | boolLit   | BangFunc  | MatchExp  | ListLit   
                        | FuncLit   | id
                        | "(" Exp ")"                                                       -- enclosed

  LeftCompare           = Exp2 compareOp
  LeftAddition          = Exp5 ("+" #(~"+") | "-" #(~"-"))
  LeftMultiply          = Exp6 multiplicationOp
  LeftExponent          = Exp7 "**"
  LeftSelect            = Exp9 #"."

  BangFunc              = "{" Block "}"
  VarAssignment         = VarAssignment #"[" Exp "]"                                        -- subscript
                        | VarAssignment #"." VarAssignment                                  -- select
                        | id
  
  FuncLit               = (Params | oneParam) "->" (BangFunc | Statement)
  Params                = "(" ListOf<Param, ","> ")"
  Args                  = "(" ListOf<Arg, ","> ")"
  Arg                   = KeywordArg | PositionalArg
  Param                 = KeywordArg | id
  PositionalArg         = Exp
  KeywordArg            = id "=" Exp
  oneParam              = id

  Obj                   = "{" ListOf<ObjField, ","> "}"
  ObjField              = key ":" Exp
  key                   = strLit

  ListLit               = "[" ListOf<Exp, ","> "]"

  Str                   = strLit | FormattedStr
  strLit                = "'" singleStrChar* "'"
                        | "\"" doubleStrChar* "\""
  FormattedStr          = "$'" (#fSingleStrChar | FStrExp)* "'"
                        | "$\"" (#fDoubleStrChar | FStrExp)* "\""
  FStrExp               = "{" Exp "}"
  
  // special chars
  fSingleStrChar        = ~"{" singleStrChar
  fDoubleStrChar        = ~"{" doubleStrChar
  singleStrChar         = ~("'" | "\\" | newLine) any                                       -- nonEscaped
                        | "\\" escapeChar                                                   -- escaped
                        | lineContinuation
  doubleStrChar         = ~("\"" | "\\" | newLine) any                                      -- nonEscaped
                        | "\\" escapeChar                                                   -- escaped
                        | lineContinuation
  escapeChar            = "'" | "\"" | "\\" | "n" | "t" | "r" | "u"
  newLine               = "\n" | "\r" ~"\n" | "\u2028" | "\u2029"
  lineContinuation      = "\\" newLine

  const                 = "const" ~idchar
  id                    = ~keyword (letter | "_") idchar*
  idchar                = alnum | "_"

  boolLit               = true | false
  true                  = "true" ~idchar
  false                 = "false" ~idchar

  num                   = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  assignmentOp          = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**="
  compareOp             = (("=" | "!") "=") | ("<" | ">") "="?
  multiplicationOp      = "*" | "/" | "%"

  MatchExp              = match id MatchBlock
  MatchBlock            = "{" CaseClause+ DefaultClause? "}"
  CaseClause            = case ListOf<Exp, ","> ":" (BangFunc | Statement)
  DefaultClause         = default ":" (BangFunc | Statement) 
  match                 = "match" ~idchar
  case                  = "case" ~idchar
  default               = "default"

  return                = "return" ~idchar

  multiLineComment      = "/*" (~"*/" any)* "*/"
  comment               = "//" (~newLine any)*

  keyword               = const     | boolLit   | match     | nil       
                        | break     | return    | local     
  nil                   = "nil" ~idchar
  break                 = "break" ~idchar
  local                 = "local" ~idchar
}