Bang {
  space := "\n" | " " | "\t" | "\r" | multiLineComment | comment
  Program               = Block
  Block                 = #newLine* (Statement #newLine+)* Statement? #newLine*
  LocalBlock            = #newLine* (LocalStatement #newLine+)* LocalStatement? #newLine*
  BangFunc              = "{" LocalBlock "}"                                -- multiLine
                        | Statement
  LocalStatement        = local VarSelect (assignmentOp Exp)?               -- localVar
                        | local const VarSelect assignmentOp Exp            -- localConst
                        | return Exp?                                       -- return
                        | break
                        | Statement
  Statement             = const? VarSelect assignmentOp Exp                 -- varAssignment
                        | print "(" Exp? ")"                                -- print
                        | Exp
                        | Enum      
  Exp                   = FuncLit
                        | Exp (("=" | "!") "=" | ("<" | ">") "="?) Exp1     -- equality
                        | "(" Exp ")"                                       -- enclosed
                        | Ternary
                        | Exp1
  Exp1                  = Exp1 "||" Exp2                                    -- or
                        | Exp2
  Exp2                  = Exp2 "&&" Exp3                                    -- and
                        | Exp3
  Exp3                  = Exp3 ("+" | "-") Exp4                             -- addSubtract
                        | Exp4
  Exp4                  = Exp4 ("*" | "/" | "%") Exp5                       -- multiplyDivideMod
                        | Exp5
  Exp5                  = Exp6 "**" Exp5                                    -- exponent
                        | ("-" | "!") Exp6                                  -- negate
                        | Exp6
  Exp6                  = (VarSelect | id) Params*                          -- call
                        | Exp7
  Exp7                  = nil       | Str       | Num       | Obj       
                        | boolLit   | BangFunc  | MatchExp  | ListLit   
                        | Range     
  VarSelect             = (Exp7 | VarSelect) "[" Exp "]"                    -- subscript
                        | (Exp7 | VarSelect)? "." id                        -- select
                        | id

  Ternary               = Exp "?" BangFunc (":" BangFunc)?
  
  FuncLit               = Params arrow BangFunc
  Params                = "(" ListOf<Arg, ","> ")"
  Arg                   = PositionalArg | KeywordArg
  PositionalArg         = Exp
  KeywordArg            = id "=" Exp
  arrow                 = "->"
  print                 = "print"

  Obj                   = "{" ObjField* "}"
  ObjField              = key ":" Exp
  key                   = strLit

  ListLit               = "[" ListOf<Exp, ","> "]"

  Range                 = range "("( digit+ ",")? digit+ ")"
  range                 = "range"

  Str                   = strLit | FormattedStr
  strLit                = "'" singleStrChar* "'"
                        | "\"" doubleStrChar* "\""
  FormattedStr          = "$'" FSingleSubstr* "'"                           -- singleQuotes
                        | "$\"" FDoubleSubstr* "\""                         -- doubleQuotes
  FSingleSubstr         = fSingleStrChar | FStrExp
  FDoubleSubstr         = fDoubleStrChar | FStrExp
  FStrExp               = "{" Exp "}"
  
  // special chars
  fSingleStrChar        = ~"{" singleStrChar
  fDoubleStrChar        = ~"{" doubleStrChar
  singleStrChar         = ~("'" | "\\" | newLine) any                       -- nonEscaped
                        | "\\" escapeChar                                   -- escaped
                        | lineContinuation
  doubleStrChar         = ~("\"" | "\\" | newLine) any                      -- nonEscaped
                        | "\\" escapeChar                                   -- escaped
                        | lineContinuation
  escapeChar            = "'" | "\"" | "\\" | "n" | "t" | "r" | "u"
  char                  = ~(escapeChar | newLine) any
  newLine               = "\n" | "\r" ~"\n" | "\u2028" | "\u2029"
  lineContinuation      = "\\" newLine

  const                 = "const" ~idchar
  id                    = ~keyword (letter | "_") idchar* "?"?
  idchar                = alnum | "_"

  boolLit               = true | false
  true                  = "true" ~idchar
  false                 = "false" ~idchar

  Num                   = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  assignmentOp          = "=" | "+=" | "-=" | "*=" | "/=" | "%="

  MatchExp              = match id MatchBlock
  MatchBlock             = "{" CaseClause+ DefaultClause CaseClause* "}"    -- withDefault
                        | "{" CaseClause+                           "}"     -- withoutDefault
  CaseClause            = case ListOf<Exp, ","> ":" BangFunc 
  DefaultClause         = default ":" BangFunc 
  match                 = "match" ~idchar
  case                  = "case" ~idchar
  default               = "default"

  Enum                  = enum id "{" EnumBlock "}"
  EnumBlock             = EnumCaseAssignment+ | enumCases
  EnumCaseAssignment    = id "=" Exp 
  enumCases             = id (("," | newLine) spaces id)*
  enum                  = "enum" ~idchar

  return                = "return" ~idchar

  multiLineComment      = "/*" (~"*/" any)* "*/"
  comment               = "//" (~newLine any)*

  keyword               = const     | print     | boolLit   | match    
                        | nil       | enum      | break     | return
                        | local     | range
  nil                   = "nil" ~idchar
  break                 = "break" ~idchar
  local                 = "local" ~idchar
}